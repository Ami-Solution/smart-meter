docker run -it --network smartmeter gettyimages/spark:2.0.2-hadoop-2.7 sh

echo "spark.cassandra.connection.host=cassandra_main" >> ./conf/spark-defaults.conf
spark-shell --packages com.datastax.spark:spark-cassandra-connector_2.11:2.0.0

:paste
import com.datastax.spark.connector._
val table = sc.cassandraTable("smartmeter", "max_voltage_by_hour")
table.count

// http://stackoverflow.com/questions/37513667/how-to-create-a-spark-dataset-from-an-rdd
// https://github.com/apache/spark/blob/master/examples/src/main/scala/org/apache/spark/examples/ml/MultilayerPerceptronClassifierExample.scala
val layers = Array[Int](1, 6, 6, 2)

import org.apache.spark.ml.classification.MultilayerPerceptronClassifier
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator
val trainer = new MultilayerPerceptronClassifier().setLayers(layers).setBlockSize(128).setSeed(1234L).setMaxIter(100)

// http://stackoverflow.com/questions/33844591/prepare-data-for-multilayerperceptronclassifier-in-scala
:paste
implicit def bool2int(b:Boolean) = if (b) 1 else 0
val data = table.map({r => ((r.get[Float]("voltage_max").toInt > 117):Int, r.get[Int]("hour"))}).toDF("label", "hour")
import org.apache.spark.ml.feature.VectorAssembler

val assembler = new VectorAssembler()
  .setInputCols(Array("hour"))
  .setOutputCol("features")

val all = assembler.transform(data)
all.show

val splits = all.randomSplit(Array(0.6, 0.4), seed = 1234L)
val train = splits(0)
val test = splits(1)

val model = trainer.fit(train)

val result = model.transform(test)

result.show




+-----+----+--------+
|label|hour|features|
+-----+----+--------+
|    1|  19|  [19.0]|
|    1|  19|  [19.0]|
|    0|   0|   [0.0]|
|    0|   0|   [0.0]|
|    1|  20|  [20.0]|
|    1|  20|  [20.0]|
|    0|   6|   [6.0]|
|    0|   6|   [6.0]|
|    0|  15|  [15.0]|
|    0|   8|   [8.0]|
|    0|   8|   [8.0]|
|    0|  12|  [12.0]|
|    0|  12|  [12.0]|
|    0|   3|   [3.0]|
|    0|   3|   [3.0]|
|    0|  14|  [14.0]|
|    0|   2|   [2.0]|
|    0|   2|   [2.0]|
|    0|  13|  [13.0]|
|    0|  11|  [11.0]|
+-----+----+--------+


+-----+----+--------+----------+
|label|hour|features|prediction|
+-----+----+--------+----------+
|    1|  19|  [19.0]|       1.0|
|    1|  19|  [19.0]|       1.0|
|    0|   0|   [0.0]|       0.0|
|    0|   0|   [0.0]|       0.0|
|    0|  12|  [12.0]|       0.0|
|    0|   3|   [3.0]|       0.0|
|    0|   2|   [2.0]|       0.0|
|    0|   2|   [2.0]|       0.0|
|    0|  14|  [14.0]|       0.0|
|    0|  11|  [11.0]|       0.0|
|    0|   7|   [7.0]|       0.0|
|    0|  18|  [18.0]|       1.0|
|    0|   1|   [1.0]|       0.0|
|    0|   9|   [9.0]|       0.0|
+-----+----+--------+----------+
